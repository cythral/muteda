Description: Mutedac (Multi-Tenant Database Cluster)
Transform: AWS::Serverless-2016-10-31
Parameters:
  MasterUsername:
    Type: String
    Description: Master username for the database cluster

  MasterPassword:
    Type: String
    Description: Master password for the database cluster

  EnableDatabaseStopping:
    Type: String
    Description: Whether or not to allow the database to be stopped when it is inactive
    AllowedValues:
      - "true"
      - "false"

Resources:
  DecryptedMasterPassword:
    Type: Custom::Secret
    Properties:
      ServiceToken: !Sub
        - arn:aws:lambda:${AWS::Region}:${MasterAccountId}:function:Secret
        - MasterAccountId: !ImportValue cfn-utilities:MasterAccountId
      Ciphertext: !Ref MasterPassword

  Cluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.04.6
      DBClusterParameterGroupName: default.aurora-mysql5.7
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !GetAtt DecryptedMasterPassword.Plaintext
      BackupRetentionPeriod: 10
      DBSubnetGroupName: !ImportValue cfn-utilities:DBSubnetGroupName
      VpcSecurityGroupIds:
        - !ImportValue cfn-utilities:DatabaseSecurityGroupId
      Tags:
        - Key: ENABLE_DATABASE_STOPPING
          Value: !Ref EnableDatabaseStopping
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  PrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.t3.small
      DBClusterIdentifier: !Ref Cluster
      PubliclyAccessible: true
      DBSubnetGroupName: !ImportValue cfn-utilities:DBSubnetGroupName

  StartDatabaseFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - rds:DescribeDBClusters
              - rds:StartDBCluster
              - events:EnableRule
              - sns:Publish
              - sqs:SendMessage
            Resource: "*"

  StartDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Mutedac.StartDatabase::Mutedac.StartDatabase.StartDatabaseHandler::Run
      Runtime: dotnetcore3.1
      Timeout: 300
      CodeUri: ../bin/Mutedac.StartDatabase/Release/netcoreapp3.1/publish/
      MemorySize: 512
      Policies:
        - AWSLambdaExecute
        - !Ref StartDatabaseFunctionPolicy
      Environment:
        Variables:
          Lambda__NotificationQueueUrl: !Ref StartDatabaseNotificationQueue
          Lambda__WaitForDatabaseAvailabilityRuleName: Mutedac.WaitForDatabaseAvailability

  StartDatabaseFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StartDatabaseFunction
      Action: lambda:InvokeFunction
      Principal: !ImportValue cfn-utilities:MasterAccountId

  StartDatabaseNotificationQueue:
    Type: AWS::SQS::Queue

  WaitForDatabaseAvailabilityEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: Mutedac.WaitForDatabaseAvailability
      ScheduleExpression: rate(1 minute)
      State: DISABLED
      Targets:
        - Id: availability-function
          Arn: !GetAtt WaitForDatabaseAvailabilityFunction.Arn
          Input: !Sub |
            {
              "DatabaseName": "${Cluster}"
            }

  WaitForDatabaseAvailabilityFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - rds:DescribeDBClusters
              - events:DisableRule
              - lambda:UpdateEventSourceMapping
            Resource: "*"

  WaitForDatabaseAvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Mutedac.WaitForDatabaseAvailability::Mutedac.WaitForDatabaseAvailability.WaitForDatabaseAvailability::Run
      Runtime: dotnetcore3.1
      Timeout: 300
      CodeUri: ../bin/Mutedac.WaitForDatabaseAvailability/Release/netcoreapp3.1/publish/
      MemorySize: 512
      Policies:
        - AWSLambdaExecute
        - !Ref WaitForDatabaseAvailabilityFunctionPolicy
      Environment:
        Variables:
          Lambda__NotificationQueueUrl: !Ref StartDatabaseNotificationQueue
          Lambda__WaitForDatabaseAvailabilityRuleName: Mutedac.WaitForDatabaseAvailability

  WaitForDatabaseAvailabilityFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WaitForDatabaseAvailabilityFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WaitForDatabaseAvailabilityEventRule.Arn

Outputs:
  ClusterName:
    Value: !Ref Cluster
    Description: Name of the database cluster
    Export:
      Name: !Sub ${AWS::StackName}:ClusterName

  ClusterAddress:
    Value: !GetAtt Cluster.Endpoint.Address
    Description: Hostname for the multi-tenant database cluster
    Export:
      Name: !Sub ${AWS::StackName}:ClusterAddress

  StartDatabaseFunctionArn:
    Value: !GetAtt StartDatabaseFunction.Arn
    Description: ARN of the start database function
    Export:
      Name: !Sub ${AWS::StackName}:StartDatabaseFunctionArn
